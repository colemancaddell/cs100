#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

void printArray(char **x, int numRows, int numCols)
{
	for (int i=0; i<numRows; i++) {
		for (int j=0; j<numCols; j++) {
			printf("%c", x[i][j]);
		}
		printf("\n");
	}
}

/*
int northward(int size, char **puzzle, char **matrix, char *word){
	int count = 0;
	return count;
}
*/

/*
int southward(int size, char **puzzle, char **matrix, char *word){
	int count = 0;
	int w = 0;
	int a = 0;
	int len = strlen(word);
	for(int j=0; j<size; j++){
		for(int i=0; i<size; i++){
			//printf("%c", puzzle[i][j]);
			if (puzzle[i][j] == word[w]) {
			//	printf("\ni is %d j is %d\n",i,j);
			//	printf("w is %d word is %c\n",w,word[w]);
				
				if (w==len-1){						//if entire word
					if (i-1>=0){	//change this when adapting
						count++;							// i is row, j is column
						while(a!=len){
			//				printf("[i][j] is %c\n", matrix[i][j]);
			//				printf("i is %d\n", i);
			//				printf("j is %d\n", j);
							matrix[i-a][j] = word[len-1-a];	//and this when adapting
							//printf("seg check");
							a++;
						}
					}
				a=0;
				}
				w++;	
			}
			else w=0;
			
			}

		}
	
	return count;
}
*/

int eastward(int size, char **puzzle, char **matrix, char *word){
	
	int count = 0;
	int w = 0;
	int a = 0;
	int len = strlen(word);
	for(int i=0; i<size; i++){
		for(int j=0; j<size; j++){
			//printf("%c", puzzle[i][j]);
			if (puzzle[i][j] == word[w]) {
				//printf("\ni is %d j is %d\n",i,j);
				//printf("w is %d word is %c\n",w,word[w]);
				
				if (w==len-1){						//if entire word
					if (j-1>=0){
						count++;							// i is row, j is column
						while(a!=len){
							//printf("[i][j] is %c\n", matrix[i][j]);
							//printf("i is %d\n", i);
							//printf("j is %d\n", j);
							matrix[i][j-a] = word[len-1-a];
							a++;
						}
					}
				a=0;
				}
				w++;	
			}
			else w=0;
			
			}

		}
	
	return count;
}

int westward(int size, char **puzzle, char **matrix, char *word){
	int count = 0;
	int letter = 0;
	int a = 0;
	int len = strlen(word);
	for(int i=0; i<size; i++){
		for(int j=size-1; j>=0; j--){
			//printf("%c", puzzle[i][j]);
			if (puzzle[i][j] == word[letter]) {
				//printf("\ni is %d j is %d\n",i,j);
				//printf("w is %d word is %c\n",w,word[w]);
				
				if (letter==len+1){						//if entire word
					if (j+1<=size-1){
						count++;							// i is row, j is column
						while(a!=len){
							//printf("[i][j] is %c\n", matrix[i][j]);
							//printf("i is %d\n", i);
							//printf("j is %d\n", j);
							matrix[i][j+a] = word[len-1-a];
							a++;
						}
					}
				a=0;
				}
				letter++;	
			}
			else letter=0;
			
			}

		}
	
	return count;
}

/*

int northeastward(int size, char **puzzle, char **matrix, char *word){
	int count = 0;
	return count;
}

int southeastward(int size, char **puzzle, char **matrix, char *word){
	int count = 0;
	return count;
}

int southwestward(int size, char **puzzle, char **matrix, char *word){
	int count = 0;
	return count;
}

int northwestward(int size, char **puzzle, char **matrix, char *word){
	int count = 0;
	return count;
}
*/

int main(int argc, char *argv[]) 
{	
    if (argc != 2){
        printf("Usage: ./a.exe %s\n", argv[1] );
        return 1;
    }

	FILE *fp=fopen(argv[1], "r");
    if (fp == NULL) {
        printf("Unable to open %s for reading\n", argv[1]);
        return 2;
    }

	int size = 0;
	while(1) {
        char ch;
        fscanf(fp, "%c", &ch);
		if(isspace(ch)) break;
        size++;
    }
	
	fclose(fp);

	FILE *fp1=fopen(argv[1], "r");
    if (fp == NULL) {
        printf("Unable to open %s for reading\n", argv[1]);
        return 2;
    }

	printf("size is %d\n", size);

	//char **x;
	printf("got data\n");
	char **puzzle=malloc(size*sizeof(char*));
	for (int i=0; i<size; i++) {
		puzzle[i]=malloc(size*sizeof(char));
	}
	char letter;
	for (int i=0; i<size; i++) {
		for (int j=0; j<size; j++) {
			fscanf(fp, " %c", &letter);
			puzzle[i][j]=letter;
		}
	}
	
	printf("The word puzzle is: \n");
	printArray(puzzle, size, size);

	char word[105];

	printf("Enter a word to search in the puzzle (or CRTL-D to exit): \n");
	scanf("%s", word);

	while(! feof(stdin)){
		
		char **matrix=malloc(size*sizeof(char*));
		for (int i=0; i<size; i++) {
			matrix[i]=malloc(size*sizeof(char));
		}
		for (int i=0; i<size; i++) {
			for (int j=0; j<size; j++) {
				matrix[i][j]='-';
		}
		}

		printf("\"%s\" was found as below.\n", word);
	//	printf("%d times in the northward direction\n",northward(size, puzzle, matrix, word));
	//	printf("%d times in the southward direction\n",southward(size, puzzle, matrix, word));
		printf("%d times in the eastward direction\n",eastward(size, puzzle, matrix, word));
		printf("%d times in the westward direction\n",westward(size, puzzle, matrix, word));
	//	printf("%d times in the northeastward direction\n",northeastward(size, puzzle, matrix, word));
	//	printf("%d times in the southeastward direction\n",southeastward(size, puzzle, matrix, word));
	//	printf("%d times in the northwestward direction\n",northwestward(size, puzzle, matrix, word));
	//	printf("%d times in the southwestward direction\n",southwestward(size, puzzle, matrix, word));

		printArray(matrix, size, size);

		printf("Enter a word to search in the puzzle (or CRTL-D to exit): ");
		scanf("%s", word);
	}

	fclose(fp1);

	return 0;
}
